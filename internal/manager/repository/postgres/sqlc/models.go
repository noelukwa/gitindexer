// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package sqlc

import (
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type IntentStatus string

const (
	IntentStatusPendingBroadcast IntentStatus = "pending_broadcast"
	IntentStatusSuccessBroadcast IntentStatus = "success_broadcast"
)

func (e *IntentStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = IntentStatus(s)
	case string:
		*e = IntentStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for IntentStatus: %T", src)
	}
	return nil
}

type NullIntentStatus struct {
	IntentStatus IntentStatus
	Valid        bool // Valid is true if IntentStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullIntentStatus) Scan(value interface{}) error {
	if value == nil {
		ns.IntentStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.IntentStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullIntentStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.IntentStatus), nil
}

type Author struct {
	ID       int64
	Name     string
	Email    string
	Username string
}

type Commit struct {
	Hash         string
	AuthorID     int64
	Message      string
	Url          pgtype.Text
	CreatedAt    pgtype.Timestamptz
	RepositoryID int64
}

type Intent struct {
	ID             uuid.UUID
	RepositoryName string
	StartDate      pgtype.Timestamptz
	Status         IntentStatus
	IsActive       bool
	CreatedAt      pgtype.Timestamptz
	UpdatedAt      pgtype.Timestamptz
}

type IntentError struct {
	ID        uuid.UUID
	IntentID  uuid.UUID
	CreatedAt pgtype.Timestamptz
	Message   string
}

type Repository struct {
	ID         int64
	Watchers   int32
	Stargazers int32
	FullName   string
	CreatedAt  pgtype.Timestamptz
	UpdatedAt  pgtype.Timestamptz
	Language   pgtype.Text
	Forks      int32
}
