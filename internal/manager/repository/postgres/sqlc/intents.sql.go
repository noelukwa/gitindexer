// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: intents.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const countIntents = `-- name: CountIntents :one
SELECT COUNT(*)
FROM intents
WHERE 
    (NOT $1 OR status = $2::intent_status)
    AND (NOT $3 OR is_active = $4)
    AND (NOT $5 OR repository_name = $6)
`

type CountIntentsParams struct {
	StatusProvided         interface{}
	Status                 IntentStatus
	IsActiveProvided       interface{}
	IsActive               bool
	RepositoryNameProvided interface{}
	RepositoryName         string
}

func (q *Queries) CountIntents(ctx context.Context, arg CountIntentsParams) (int64, error) {
	row := q.db.QueryRow(ctx, countIntents,
		arg.StatusProvided,
		arg.Status,
		arg.IsActiveProvided,
		arg.IsActive,
		arg.RepositoryNameProvided,
		arg.RepositoryName,
	)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const findIntent = `-- name: FindIntent :one
SELECT 
    id, repository_name, start_date, status, is_active, created_at, updated_at
FROM 
    intents
WHERE 
    id = $1
`

// FindIntent.sql
func (q *Queries) FindIntent(ctx context.Context, id uuid.UUID) (Intent, error) {
	row := q.db.QueryRow(ctx, findIntent, id)
	var i Intent
	err := row.Scan(
		&i.ID,
		&i.RepositoryName,
		&i.StartDate,
		&i.Status,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findIntents = `-- name: FindIntents :many
SELECT 
    id, repository_name, start_date, status, is_active, created_at, updated_at
FROM 
    intents
WHERE 
    (NOT $3 OR status = $4::intent_status)
    AND (NOT $5 OR is_active = $6)
    AND (NOT $7 OR repository_name = $8)
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type FindIntentsParams struct {
	Limit                  int32
	Offset                 int32
	StatusProvided         interface{}
	Status                 IntentStatus
	IsActiveProvided       interface{}
	IsActive               bool
	RepositoryNameProvided interface{}
	RepositoryName         string
}

func (q *Queries) FindIntents(ctx context.Context, arg FindIntentsParams) ([]Intent, error) {
	rows, err := q.db.Query(ctx, findIntents,
		arg.Limit,
		arg.Offset,
		arg.StatusProvided,
		arg.Status,
		arg.IsActiveProvided,
		arg.IsActive,
		arg.RepositoryNameProvided,
		arg.RepositoryName,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Intent
	for rows.Next() {
		var i Intent
		if err := rows.Scan(
			&i.ID,
			&i.RepositoryName,
			&i.StartDate,
			&i.Status,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveIntent = `-- name: SaveIntent :one
INSERT INTO intents (
    id, repository_name, start_date, status, is_active
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, repository_name, start_date, status, is_active, created_at, updated_at
`

type SaveIntentParams struct {
	ID             uuid.UUID
	RepositoryName string
	StartDate      pgtype.Timestamptz
	Status         IntentStatus
	IsActive       bool
}

// SaveIntent.sql
func (q *Queries) SaveIntent(ctx context.Context, arg SaveIntentParams) (Intent, error) {
	row := q.db.QueryRow(ctx, saveIntent,
		arg.ID,
		arg.RepositoryName,
		arg.StartDate,
		arg.Status,
		arg.IsActive,
	)
	var i Intent
	err := row.Scan(
		&i.ID,
		&i.RepositoryName,
		&i.StartDate,
		&i.Status,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const saveIntentError = `-- name: SaveIntentError :exec
INSERT INTO intent_errors (
    id, intent_id, created_at, message
) VALUES (
    $1, $2, $3, $4
)
`

type SaveIntentErrorParams struct {
	ID        uuid.UUID
	IntentID  uuid.UUID
	CreatedAt pgtype.Timestamptz
	Message   string
}

// SaveIntentError.sql
func (q *Queries) SaveIntentError(ctx context.Context, arg SaveIntentErrorParams) error {
	_, err := q.db.Exec(ctx, saveIntentError,
		arg.ID,
		arg.IntentID,
		arg.CreatedAt,
		arg.Message,
	)
	return err
}

const updateIntent = `-- name: UpdateIntent :one
UPDATE intents
SET 
    status = COALESCE($2, status),
    is_active = COALESCE($3, is_active),
    start_date = COALESCE($4, start_date),
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, repository_name, start_date, status, is_active, created_at, updated_at
`

type UpdateIntentParams struct {
	ID        uuid.UUID
	Status    IntentStatus
	IsActive  bool
	StartDate pgtype.Timestamptz
}

// UpdateIntent.sql
func (q *Queries) UpdateIntent(ctx context.Context, arg UpdateIntentParams) (Intent, error) {
	row := q.db.QueryRow(ctx, updateIntent,
		arg.ID,
		arg.Status,
		arg.IsActive,
		arg.StartDate,
	)
	var i Intent
	err := row.Scan(
		&i.ID,
		&i.RepositoryName,
		&i.StartDate,
		&i.Status,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
